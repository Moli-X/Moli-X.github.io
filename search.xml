<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HMI触摸屏程序设计详解</title>
      <link href="/2025/03/13/HMI%E8%A7%A6%E6%91%B8%E5%B1%8F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%A6%E8%A7%A3/"/>
      <url>/2025/03/13/HMI%E8%A7%A6%E6%91%B8%E5%B1%8F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="HMI触摸屏程序设计详解"><a href="#HMI触摸屏程序设计详解" class="headerlink" title="HMI触摸屏程序设计详解"></a>HMI触摸屏程序设计详解</h1><p>本文详细解析一个工业HMI触摸屏程序，该程序实现了参数设置、状态监控、报警处理等功能，并包含完善的错误检测机制。</p><h2 id="程序功能概述"><a href="#程序功能概述" class="headerlink" title="程序功能概述"></a>程序功能概述</h2><p>本程序主要实现以下功能：</p><ol><li>参数初始化与设置</li><li>实时状态监控</li><li>报警处理与显示</li><li>参数比对与更新</li><li>固件版本检查</li><li>进度显示与更新</li></ol><h2 id="主要模块说明"><a href="#主要模块说明" class="headerlink" title="主要模块说明"></a>主要模块说明</h2><h3 id="1-初始化模块"><a href="#1-初始化模块" class="headerlink" title="1. 初始化模块"></a>1. 初始化模块</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Initial</span><span class="params">()</span></span></span><br><span class="line">    <span class="comment">-- 开启韧体检查</span></span><br><span class="line">    mem.inter.WriteBit(<span class="number">12</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="comment">-- 隐藏进度条</span></span><br><span class="line">    mem.inter.WriteBit(<span class="number">12</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- 读取设备参数</span></span><br><span class="line">    <span class="keyword">local</span> ModelCode = link.Read(<span class="string">&quot;&#123;VFD&#125;1@RW-0000&quot;</span>)</span><br><span class="line">    <span class="keyword">local</span> CarryFreq = link.Read(<span class="string">&quot;&#123;VFD&#125;1@RW-0011&quot;</span>)</span><br><span class="line">    <span class="keyword">local</span> FreqCommand = link.Read(<span class="string">&quot;&#123;VFD&#125;1@RW-0014&quot;</span>)</span><br><span class="line">    <span class="keyword">local</span> MaxOperatFreq = link.Read(<span class="string">&quot;&#123;VFD&#125;1@RW-0100&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>初始化模块负责系统启动时的准备工作，包括参数读取和功能设置。</p><h3 id="2-参数处理模块"><a href="#2-参数处理模块" class="headerlink" title="2. 参数处理模块"></a>2. 参数处理模块</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ProcessLinkValues</span><span class="params">()</span></span></span><br><span class="line">    <span class="comment">-- 读取设备状态</span></span><br><span class="line">    value1 = link.Read(<span class="string">&quot;&#123;VFD&#125;1@RW-0232&quot;</span>)</span><br><span class="line">    value2 = link.Read(<span class="string">&quot;&#123;VFD&#125;1@RW-0233&quot;</span>)</span><br><span class="line">    value3 = link.Read(<span class="string">&quot;&#123;VFD&#125;1@RW-0C3B&quot;</span>)</span><br><span class="line">    value4 = link.Read(<span class="string">&quot;&#123;VFD&#125;1@RW-0009&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- 写入内存</span></span><br><span class="line">    mem.inter.Write(<span class="number">250</span>, value1)</span><br><span class="line">    mem.inter.Write(<span class="number">251</span>, value2)</span><br><span class="line">    mem.inter.Write(<span class="number">252</span>, value3)</span><br><span class="line">    mem.inter.Write(<span class="number">253</span>, value4)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>参数处理模块负责读取设备状态并存储到内存中。</p><h3 id="3-报警处理模块"><a href="#3-报警处理模块" class="headerlink" title="3. 报警处理模块"></a>3. 报警处理模块</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Alarm</span><span class="params">()</span></span></span><br><span class="line">    <span class="comment">-- 读取报警代码</span></span><br><span class="line">    mem.inter.Write(<span class="number">2100</span>, link.Read(<span class="string">&quot;&#123;VFD&#125;1@RW-2100&quot;</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">local</span> AlarmID = mem.inter.Read(<span class="number">2100</span>)</span><br><span class="line">    <span class="keyword">local</span> Error, Warning</span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- 解析报警代码</span></span><br><span class="line">    <span class="keyword">if</span> AlarmID &gt; <span class="number">0</span> <span class="keyword">and</span> AlarmID &lt;= <span class="number">255</span> <span class="keyword">then</span></span><br><span class="line">        Error = AlarmID</span><br><span class="line">        Warning = <span class="number">0</span></span><br><span class="line">    <span class="keyword">elseif</span> AlarmID &gt; <span class="number">255</span> <span class="keyword">then</span></span><br><span class="line">        Error = <span class="number">0</span></span><br><span class="line">        Warning = AlarmID - <span class="number">255</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- 更新报警显示</span></span><br><span class="line">    mem.inter.Write(<span class="number">119</span>, Error)</span><br><span class="line">    mem.inter.Write(<span class="number">120</span>, Warning)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>报警处理模块实时监控设备状态，解析并显示报警信息。</p><h3 id="4-参数更新模块"><a href="#4-参数更新模块" class="headerlink" title="4. 参数更新模块"></a>4. 参数更新模块</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UpdatePara</span><span class="params">(para_table, write_case_table, rt_index)</span></span></span><br><span class="line">    <span class="comment">-- 检查机器码和固件版本</span></span><br><span class="line">    <span class="keyword">if</span> MachineCodeCheck(para_table[<span class="number">1</span>][rt_index], C2000RErrorCodeScreen) == <span class="number">0</span> <span class="keyword">or</span></span><br><span class="line">       (mem.inter.ReadBit(<span class="number">12</span>, <span class="number">2</span>) == <span class="number">1</span> <span class="keyword">and</span> FwVersionCheck(para_table[<span class="number">2</span>][rt_index], FW_VersionErrorScreen) == <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 更新参数</span></span><br><span class="line">    <span class="keyword">for</span> k = <span class="number">1</span>, <span class="number">2</span> <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">for</span> i = <span class="number">1</span>, size <span class="keyword">do</span></span><br><span class="line">            UpdateProgress((k - <span class="number">1</span>) * size + i, <span class="number">2</span> * size)</span><br><span class="line">            mem.inter.WriteAscii(<span class="number">130</span>, paraindex, <span class="built_in">string</span>.<span class="built_in">len</span>(paraindex))</span><br><span class="line">            mem.inter.WriteAscii(<span class="number">135</span>, <span class="built_in">tostring</span>(value), <span class="built_in">string</span>.<span class="built_in">len</span>(<span class="built_in">tostring</span>(value)))</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>参数更新模块负责批量更新设备参数，包含进度显示功能。</p><h2 id="关键技术点"><a href="#关键技术点" class="headerlink" title="关键技术点"></a>关键技术点</h2><ol><li><strong>参数互锁</strong>：通过内存位操作实现参数更新互锁</li><li><strong>错误处理</strong>：完善的错误检测和处理机制</li><li><strong>状态管理</strong>：使用内存变量记录设备状态</li><li><strong>进度显示</strong>：实时更新操作进度</li><li><strong>固件检查</strong>：自动检测设备固件版本</li></ol><p><img src="/images/hmi/hmi-interface.jpg" alt="HMI界面示例"></p><h2 id="程序流程图"><a href="#程序流程图" class="headerlink" title="程序流程图"></a>程序流程图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[初始化] --&gt; B[参数读取]</span><br><span class="line">    B --&gt; C&#123;参数检查&#125;</span><br><span class="line">    C --&gt;|通过| D[参数更新]</span><br><span class="line">    C --&gt;|失败| E[错误处理]</span><br><span class="line">    D --&gt; F[状态监控]</span><br><span class="line">    F --&gt; G&#123;报警检测&#125;</span><br><span class="line">    G --&gt;|有报警| H[报警处理]</span><br><span class="line">    G --&gt;|无报警| I[结束]</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本程序展示了工业HMI触摸屏系统的典型实现，包含了人机界面开发中的多个关键技术点。通过模块化设计和完善的保护机制，确保了系统的可靠性和易用性。</p>]]></content>
      
      
      <categories>
          
          <category> HMI </category>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 触摸屏编程 </tag>
            
            <tag> 人机界面 </tag>
            
            <tag> 自动化控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装AnZhiYu主题并个性化配置</title>
      <link href="/2025/03/13/%E5%AE%89%E8%A3%85AnZhiYu%E4%B8%BB%E9%A2%98%E5%B9%B6%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
      <url>/2025/03/13/%E5%AE%89%E8%A3%85AnZhiYu%E4%B8%BB%E9%A2%98%E5%B9%B6%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="安装AnZhiYu主题并个性化配置"><a href="#安装AnZhiYu主题并个性化配置" class="headerlink" title="安装AnZhiYu主题并个性化配置"></a>安装AnZhiYu主题并个性化配置</h1><h2 id="1-主题介绍"><a href="#1-主题介绍" class="headerlink" title="1. 主题介绍"></a>1. 主题介绍</h2><p>AnZhiYu是一款简洁优雅的Hexo主题，具有以下特点：</p><ul><li>响应式设计</li><li>多种配色方案</li><li>丰富的插件支持</li><li>高度可定制化</li></ul><h2 id="2-安装步骤"><a href="#2-安装步骤" class="headerlink" title="2. 安装步骤"></a>2. 安装步骤</h2><h3 id="2-1-安装主题"><a href="#2-1-安装主题" class="headerlink" title="2.1 安装主题"></a>2.1 安装主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git themes/anzhiyu</span><br></pre></td></tr></table></figure><h3 id="2-2-修改配置文件"><a href="#2-2-修改配置文件" class="headerlink" title="2.2 修改配置文件"></a>2.2 修改配置文件</h3><p>在<code>_config.yml</code>中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">anzhiyu</span></span><br></pre></td></tr></table></figure><h2 id="3-个性化配置"><a href="#3-个性化配置" class="headerlink" title="3. 个性化配置"></a>3. 个性化配置</h2><h3 id="3-1-修改主题颜色"><a href="#3-1-修改主题颜色" class="headerlink" title="3.1 修改主题颜色"></a>3.1 修改主题颜色</h3><p>在<code>themes/anzhiyu/_config.yml</code>中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">color:</span></span><br><span class="line">  <span class="attr">primary:</span> <span class="string">&#x27;#3eaf7c&#x27;</span></span><br><span class="line">  <span class="attr">secondary:</span> <span class="string">&#x27;#2d96bd&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-添加社交链接"><a href="#3-2-添加社交链接" class="headerlink" title="3.2 添加社交链接"></a>3.2 添加社交链接</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/Moli-X</span></span><br><span class="line">  <span class="attr">Twitter:</span> <span class="string">https://twitter.com/Moli-X</span></span><br></pre></td></tr></table></figure><h2 id="4-常见问题"><a href="#4-常见问题" class="headerlink" title="4. 常见问题"></a>4. 常见问题</h2><h3 id="4-1-常用命令"><a href="#4-1-常用命令" class="headerlink" title="4.1 常用命令"></a>4.1 常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地预览</span></span><br><span class="line">hexo cl; hexo s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送更新上线</span></span><br><span class="line">hexo cl; hexo g; hexo d</span><br></pre></td></tr></table></figure><h3 id="4-2-如何更新主题？"><a href="#4-2-如何更新主题？" class="headerlink" title="4.2 如何更新主题？"></a>4.2 如何更新主题？</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/anzhiyu</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="4-3-如何自定义样式？"><a href="#4-3-如何自定义样式？" class="headerlink" title="4.3 如何自定义样式？"></a>4.3 如何自定义样式？</h3><p>在<code>source/css/custom.css</code>中添加自定义样式</p><h2 id="5-参考资源"><a href="#5-参考资源" class="headerlink" title="5. 参考资源"></a>5. 参考资源</h2><ul><li><a href="https://anzhiyu.cn/">AnZhiYu官方文档</a></li><li><a href="https://hexo.io/">Hexo官方文档</a></li><li><a href="https://blog.anheyu.com/">安知鱼博客</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 主题 </tag>
            
            <tag> AnZhiYu </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工业机器人取放料程序详解</title>
      <link href="/2025/03/13/%E5%B7%A5%E4%B8%9A%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%96%E6%94%BE%E6%96%99%E7%A8%8B%E5%BA%8F%E8%AF%A6%E8%A7%A3/"/>
      <url>/2025/03/13/%E5%B7%A5%E4%B8%9A%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%96%E6%94%BE%E6%96%99%E7%A8%8B%E5%BA%8F%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="工业机器人取放料程序详解"><a href="#工业机器人取放料程序详解" class="headerlink" title="工业机器人取放料程序详解"></a>工业机器人取放料程序详解</h1><p>本文详细解析一个工业机器人取放料程序，该程序实现了双工位自动取料、放料功能，并包含完善的报警检测机制。</p><h2 id="程序功能概述"><a href="#程序功能概述" class="headerlink" title="程序功能概述"></a>程序功能概述</h2><p>本程序主要实现以下功能：</p><ol><li>双工位自动取料</li><li>自动放料</li><li>负压检测与报警</li><li>物料检测</li><li>超时保护</li><li>自动复位</li></ol><h2 id="主要模块说明"><a href="#主要模块说明" class="headerlink" title="主要模块说明"></a>主要模块说明</h2><h3 id="1-初始化模块"><a href="#1-初始化模块" class="headerlink" title="1. 初始化模块"></a>1. 初始化模块</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Initialization</span><span class="params">()</span></span></span><br><span class="line">    <span class="comment">-- 伺服使能</span></span><br><span class="line">    RobotServoOn()</span><br><span class="line">    <span class="comment">-- 数据清零</span></span><br><span class="line">    Datazero()</span><br><span class="line">    <span class="comment">-- 速度设置</span></span><br><span class="line">    SetSpeed()</span><br><span class="line">    <span class="comment">-- 回原点</span></span><br><span class="line">    MovP(<span class="string">&quot;home&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>初始化模块负责系统启动时的准备工作，包括伺服使能、数据清零、速度设置和回原点操作。</p><h3 id="2-取料模块"><a href="#2-取料模块" class="headerlink" title="2. 取料模块"></a>2. 取料模块</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PickOne</span><span class="params">()</span></span></span><br><span class="line">    <span class="comment">-- 等待DI2和DI4信号</span></span><br><span class="line">    <span class="keyword">while</span> (DI(<span class="number">2</span>) ~= <span class="string">&quot;ON&quot;</span> <span class="keyword">or</span> DI(<span class="number">4</span>) ~= <span class="string">&quot;ON&quot;</span>) <span class="keyword">do</span></span><br><span class="line">        cal_time()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">-- 执行取料动作</span></span><br><span class="line">    MovL(<span class="string">&quot;pos1&quot;</span> + Z(<span class="number">190</span>))</span><br><span class="line">    MovL(<span class="string">&quot;pos1&quot;</span>)</span><br><span class="line">    <span class="comment">-- 打开真空发生器</span></span><br><span class="line">    DO(<span class="number">2</span>, <span class="string">&quot;ON&quot;</span>)</span><br><span class="line">    DO(<span class="number">3</span>, <span class="string">&quot;ON&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>取料模块负责工位一的取料操作，包含超时检测功能。</p><h3 id="3-放料模块"><a href="#3-放料模块" class="headerlink" title="3. 放料模块"></a>3. 放料模块</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Put</span><span class="params">()</span></span></span><br><span class="line">    <span class="comment">-- 工位1放料</span></span><br><span class="line">    <span class="keyword">if</span> Pos1 == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">        MovL(<span class="string">&quot;pos1&quot;</span> + Z(<span class="number">50</span>))</span><br><span class="line">        CheckMaterial()</span><br><span class="line">        CheckPressure()</span><br><span class="line">        MovL(<span class="string">&quot;pos1&quot;</span> + Z(<span class="number">190</span>))</span><br><span class="line">        MovL(<span class="string">&quot;put1&quot;</span>+Z(<span class="number">13</span>))</span><br><span class="line">        MovL(<span class="string">&quot;put1&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">-- 关闭真空</span></span><br><span class="line">    DO(<span class="number">2</span>, <span class="string">&quot;OFF&quot;</span>)</span><br><span class="line">    DO(<span class="number">3</span>, <span class="string">&quot;OFF&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>放料模块实现自动放料功能，包含物料检测和负压检测。</p><h3 id="4-报警检测模块"><a href="#4-报警检测模块" class="headerlink" title="4. 报警检测模块"></a>4. 报警检测模块</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CheckPressure</span><span class="params">()</span></span></span><br><span class="line">    <span class="comment">-- DI5触发报警</span></span><br><span class="line">    <span class="keyword">if</span> DI(<span class="number">5</span>)==<span class="string">&quot;OFF&quot;</span> <span class="keyword">and</span> DI(<span class="number">6</span>)==<span class="string">&quot;ON&quot;</span> <span class="keyword">then</span></span><br><span class="line">        DO(<span class="number">4</span>,<span class="string">&quot;ON&quot;</span>) <span class="comment">-- 报警输出</span></span><br><span class="line">        DELAY(<span class="number">0.5</span>)</span><br><span class="line">        DO(<span class="number">4</span>,<span class="string">&quot;OFF&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>报警检测模块实时监控负压状态，确保系统安全运行。</p><h2 id="关键技术点"><a href="#关键技术点" class="headerlink" title="关键技术点"></a>关键技术点</h2><ol><li><strong>信号互锁</strong>：通过DI信号实现动作互锁，确保安全</li><li><strong>超时保护</strong>：cal_time()函数实现操作超时检测</li><li><strong>状态管理</strong>：使用Pos1、Pos2变量记录物料状态</li><li><strong>报警处理</strong>：完善的报警检测和处理机制</li></ol><h2 id="程序流程图"><a href="#程序流程图" class="headerlink" title="程序流程图"></a>程序流程图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[初始化] --&gt; B&#123;选择工位&#125;</span><br><span class="line">    B --&gt;|工位1| C[工位1取料]</span><br><span class="line">    B --&gt;|工位2| D[工位2取料]</span><br><span class="line">    C --&gt; E[放料]</span><br><span class="line">    D --&gt; E</span><br><span class="line">    E --&gt; F&#123;DI4状态&#125;</span><br><span class="line">    F --&gt;|ON| G[等待]</span><br><span class="line">    F --&gt;|OFF| H[结束]</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本程序展示了工业机器人取放料系统的典型实现，包含了自动化控制中的多个关键技术点。通过模块化设计和完善的保护机制，确保了系统的可靠性和安全性。</p>]]></content>
      
      
      <categories>
          
          <category> 工业机器人 </category>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化控制 </tag>
            
            <tag> 机器人编程 </tag>
            
            <tag> 取放料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工业机器人编程指南</title>
      <link href="/2025/03/13/%E5%B7%A5%E4%B8%9A%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/"/>
      <url>/2025/03/13/%E5%B7%A5%E4%B8%9A%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="工业机器人编程指南"><a href="#工业机器人编程指南" class="headerlink" title="工业机器人编程指南"></a>工业机器人编程指南</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>工业机器人是现代智能制造的核心设备之一。本文将详细介绍工业机器人编程的基础知识和实用技巧。</p><h2 id="主流机器人品牌"><a href="#主流机器人品牌" class="headerlink" title="主流机器人品牌"></a>主流机器人品牌</h2><ul><li>ABB</li><li>KUKA</li><li>FANUC</li><li>YASKAWA</li><li>KAWASAKI</li></ul><h2 id="编程语言概述"><a href="#编程语言概述" class="headerlink" title="编程语言概述"></a>编程语言概述</h2><ol><li>RAPID (ABB)</li><li>KRL (KUKA)</li><li>KAREL (FANUC)</li><li>INFORM (YASKAWA)</li><li>AS (KAWASAKI)</li></ol><h2 id="编程基础"><a href="#编程基础" class="headerlink" title="编程基础"></a>编程基础</h2><h3 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h3><ul><li>世界坐标系</li><li>工具坐标系</li><li>用户坐标系</li></ul><h3 id="运动指令"><a href="#运动指令" class="headerlink" title="运动指令"></a>运动指令</h3><ul><li>直线运动</li><li>圆弧运动</li><li>关节运动</li></ul><h3 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h3><ul><li>主程序</li><li>子程序</li><li>函数</li></ul><h2 id="高级编程技巧"><a href="#高级编程技巧" class="headerlink" title="高级编程技巧"></a>高级编程技巧</h2><ul><li>路径优化</li><li>碰撞检测</li><li>力控制</li><li>视觉集成</li></ul><h2 id="安全注意事项"><a href="#安全注意事项" class="headerlink" title="安全注意事项"></a>安全注意事项</h2><ul><li>工作区域划分</li><li>急停装置使用</li><li>速度限制设置</li><li>负载检测</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>掌握工业机器人编程技术对于现代制造业至关重要。通过系统学习和实践，可以充分发挥工业机器人在智能制造中的优势。</p>]]></content>
      
      
      <categories>
          
          <category> 工业机器人 </category>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器人编程 </tag>
            
            <tag> 工业自动化 </tag>
            
            <tag> 机器人控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>台达触摸屏在工业自动化中的应用</title>
      <link href="/2025/01/22/%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87HMI%E7%9A%84%E5%8D%9A%E6%96%87/"/>
      <url>/2025/01/22/%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87HMI%E7%9A%84%E5%8D%9A%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h1 id="台达触摸屏在工业自动化中的应用"><a href="#台达触摸屏在工业自动化中的应用" class="headerlink" title="台达触摸屏在工业自动化中的应用"></a>台达触摸屏在工业自动化中的应用</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在现代工业自动化系统中，人机界面（HMI）扮演着至关重要的角色。作为工业自动化领域的领先品牌，台达电子（Delta Electronics）推出的触摸屏产品以其卓越的性能和可靠性，在众多工业应用中广受好评。</p><h2 id="台达触摸屏产品概述"><a href="#台达触摸屏产品概述" class="headerlink" title="台达触摸屏产品概述"></a>台达触摸屏产品概述</h2><h3 id="产品系列"><a href="#产品系列" class="headerlink" title="产品系列"></a>产品系列</h3><p>台达触摸屏产品线丰富，主要包含以下系列：</p><table><thead><tr><th>系列</th><th>特点</th><th>适用场景</th></tr></thead><tbody><tr><td>DOP-100</td><td>入门级产品，性价比高</td><td>小型设备监控</td></tr><tr><td>DOP-B</td><td>中端产品，功能全面</td><td>中型生产线控制</td></tr><tr><td>DOP-W</td><td>高端产品，支持多语言和复杂应用</td><td>大型自动化系统</td></tr></tbody></table><h3 id="技术参数"><a href="#技术参数" class="headerlink" title="技术参数"></a>技术参数</h3><ul><li>屏幕尺寸：7”-15”</li><li>分辨率：800x480 - 1920x1080</li><li>处理器：ARM Cortex-A8</li><li>内存：128MB - 512MB</li><li>存储：256MB - 1GB</li></ul><h2 id="主要功能特点"><a href="#主要功能特点" class="headerlink" title="主要功能特点"></a>主要功能特点</h2><ol><li>高分辨率触摸屏</li><li>强大的数据处理能力</li><li>丰富的通讯接口</li><li>直观的编程软件</li><li>可靠的工业级设计</li></ol><h2 id="典型应用场景"><a href="#典型应用场景" class="headerlink" title="典型应用场景"></a>典型应用场景</h2><ul><li>生产线监控</li><li>设备状态显示</li><li>参数设置与调整</li><li>报警信息管理</li><li>数据采集与分析</li></ul><h2 id="编程与配置方法"><a href="#编程与配置方法" class="headerlink" title="编程与配置方法"></a>编程与配置方法</h2><p>台达提供DOPSoft编程软件，支持：</p><ul><li>图形化界面设计</li><li>数据标签管理</li><li>报警系统配置</li><li>历史数据记录</li><li>远程监控功能</li></ul><h2 id="维护与故障排除"><a href="#维护与故障排除" class="headerlink" title="维护与故障排除"></a>维护与故障排除</h2><p>常见问题及解决方法：</p><ol><li>触摸屏无响应：检查电源和通讯连接</li><li>显示异常：检查分辨率和刷新率设置</li><li>数据丢失：定期备份项目文件</li><li>通讯故障：检查协议设置和接线</li></ol><h2 id="总结与展望"><a href="#总结与展望" class="headerlink" title="总结与展望"></a>总结与展望</h2><p>台达触摸屏凭借其出色的性能和可靠性，在工业自动化领域占据重要地位。随着工业4.0的发展，台达将继续推出更多创新产品，为智能制造提供强有力的支持。</p>]]></content>
      
      
      <categories>
          
          <category> HMI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人机界面 </tag>
            
            <tag> 工业自动化 </tag>
            
            <tag> 台达 </tag>
            
            <tag> HMI </tag>
            
            <tag> 触摸屏 </tag>
            
            <tag> 台达DOP </tag>
            
            <tag> 工业控制 </tag>
            
            <tag> 智能制造 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这是一篇机械手的文章</title>
      <link href="/2025/01/22/%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87%E6%9C%BA%E6%A2%B0%E6%89%8B%E7%9A%84%E6%96%87%E7%AB%A0/"/>
      <url>/2025/01/22/%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87%E6%9C%BA%E6%A2%B0%E6%89%8B%E7%9A%84%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 机械手 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
